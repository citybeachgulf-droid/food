generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  phone         String?         @unique
  passwordHash  String
  gender        Gender
  isKycVerified Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  profile       UserProfile?
  interests     UserInterest[]
  availabilities Availability[]
  answers       UserAnswer[]
  groupMembers  GroupMember[]
  payments      Payment[]
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  firstName String
  lastName  String
  birthDate DateTime
  bio       String?
  latitude  Float?
  longitude Float?
}

model Interest {
  id    String @id @default(cuid())
  name  String @unique
  users UserInterest[]
}

model UserInterest {
  userId     String
  interestId String
  user       User     @relation(fields: [userId], references: [id])
  interest   Interest @relation(fields: [interestId], references: [id])
  @@id([userId, interestId])
}

model Availability {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  dayOfWeek Int      // 0=Sunday .. 6=Saturday
  startTime String   // "18:00"
  endTime   String   // "21:00"
}

model Question {
  id       String   @id @default(cuid())
  text     String
  weight   Int      @default(1)
  isActive Boolean  @default(true)
  answers  UserAnswer[]
}

model UserAnswer {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  value      String
  user       User     @relation(fields: [userId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  @@unique([userId, questionId])
}

model Restaurant {
  id        String          @id @default(cuid())
  name      String
  address   String
  latitude  Float
  longitude Float
  capacity  Int
  slots     RestaurantSlot[]
}

model RestaurantSlot {
  id           String     @id @default(cuid())
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  startAt      DateTime
  endAt        DateTime
  capacity     Int
  isAvailable  Boolean    @default(true)
  sessions     Session[]
}

model Session {
  id              String          @id @default(cuid())
  restaurantSlotId String
  restaurantSlot  RestaurantSlot  @relation(fields: [restaurantSlotId], references: [id])
  targetGender     Gender
  groupSize        Int
  groups           Group[]
  payments         Payment[]
}

model Group {
  id        String        @id @default(cuid())
  sessionId String
  session   Session       @relation(fields: [sessionId], references: [id])
  members   GroupMember[]
}

model GroupMember {
  id        String  @id @default(cuid())
  groupId   String
  userId    String
  group     Group   @relation(fields: [groupId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  hasPaid   Boolean @default(false)
  @@unique([groupId, userId])
}

model Payment {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  sessionId     String
  session       Session  @relation(fields: [sessionId], references: [id])
  amountCents   Int
  currency      String   @default("usd")
  status        String   // requires_action | succeeded | failed
  provider      String   // stripe
  providerRef   String?  // intent id
  createdAt     DateTime @default(now())
}

